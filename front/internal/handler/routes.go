// Code generated by goctl. DO NOT EDIT.
package handler

import (
	"net/http"

	article "t3-zero/front/internal/handler/article"
	ask "t3-zero/front/internal/handler/ask"
	login "t3-zero/front/internal/handler/login"
	"t3-zero/front/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/login/login",
				Handler: login.UserLoginHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/login/register",
				Handler: login.UserRegisterHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/login/getMobileCode",
				Handler: login.UserMobileCodeHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/login/passwordReset",
				Handler: login.UserResetPwdHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/login/auth2qq",
				Handler: login.Auth2qqHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/login/auth2wechat",
				Handler: login.Auth2wechatHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/login/auth2apple",
				Handler: login.Auth2appleHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/login/auth2mobileBind",
				Handler: login.Auth2mobileBindHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/v1"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Auth, serverCtx.CryptionRequest, serverCtx.CryptionResponse},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/ask/officialAsks",
					Handler: ask.OfficialAsksHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/ask/userAsks",
					Handler: ask.UserAsksHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/ask/userAskPost",
					Handler: ask.UserAskPostHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/ask/userAskEnd",
					Handler: ask.UserAskEndHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/article/categoryArticles",
				Handler: article.CategoryArticlesHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/article/articles/:id",
				Handler: article.GetArticleHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/v1"),
	)
}
